<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="http://localhost:4000/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.3.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-01-27T09:09:12+01:00</updated><id>http://localhost:4000//</id><title type="html">Aulin</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</subtitle><entry><title type="html">Crashplan PROe</title><link href="http://localhost:4000/2015/09/15/CrashPlanPROe.html" rel="alternate" type="text/html" title="Crashplan PROe" /><published>2015-09-15T14:37:00+02:00</published><updated>2015-09-15T14:37:00+02:00</updated><id>http://localhost:4000/2015/09/15/CrashPlanPROe</id><content type="html" xml:base="http://localhost:4000/2015/09/15/CrashPlanPROe.html">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;In this tutorial I will cover how to setup a &lt;a href=&quot;http://www.code42.com/products/crashplan&quot;&gt;CrashPlan&lt;/a&gt; PROE server hosted in &lt;a href=&quot;https://www.docker.com&quot;&gt;Docker&lt;/a&gt; container running on a &lt;a href=&quot;https://www.synology.com/en-global&quot;&gt;Synology&lt;/a&gt;.
Repo can be found at &lt;a href=&quot;https://github.com/erikaulin/docker-crashplanproserver&quot;&gt;Github&lt;/a&gt; and Image at &lt;a href=&quot;https://hub.docker.com/r/erikaulin/crashplanproe&quot;&gt;Docker HUB&lt;/a&gt;.
***&lt;/p&gt;
&lt;h3 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.synology.com/en-us/products&quot;&gt;Synology hardware&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;1gb of free RAM&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;get-started&quot;&gt;Get started&lt;/h3&gt;

&lt;p&gt;First you need create the folder structure that will be used to expose the code42 data and make it accessible directly from synology shares.
In this example I want to expose all folder that contain CrashPlan data, logs and use a specific backup destination.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/code42/code42_folders.png&quot; alt=&quot;Folder Stucture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next you need to install the Docker Applications using Package Center.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/code42/code42_docker_install.png&quot; alt=&quot;Folder Stucture&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;download-image-and-create-container&quot;&gt;Download image and create container.&lt;/h4&gt;

&lt;p&gt;Start the Docker from menu and go to Registry search for &lt;em&gt;crashplanproe&lt;/em&gt; select it and click on Download.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/code42/code42_docker_registry.png&quot; alt=&quot;Folder Stucture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next go to Image and Launch dropdown menu select &lt;em&gt;Launch with wizard&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/code42/code42_docker_image.png&quot; alt=&quot;Folder Stucture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Choose a name for your Container and add &lt;a href=&quot;http://support.code42.com/Administrator/3/Planning_And_Installing/TCP_And_UDP_Ports&quot;&gt;ports&lt;/a&gt; needed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/code42/code42_docker_wizard.png&quot; alt=&quot;Folder Stucture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select CPU Priority level and optional shortcut on desktop.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/code42/code42_docker_wizard2.png&quot; alt=&quot;Folder Stucture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Before you hit Apply we need to set some Advanced Settings.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/code42/code42_docker_wizard3.png&quot; alt=&quot;Folder Stucture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we get the option to specify what location should be exposed to the container.
In this case you can use the folders we created. Once done hit OK and then Apply.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/code42/code42_docker_volume.png&quot; alt=&quot;Folder Stucture&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;using-code42-crashplanproe-server&quot;&gt;Using Code42 CrashPlanPROe Server&lt;/h3&gt;

&lt;h4 id=&quot;starting-the-container&quot;&gt;Starting the Container&lt;/h4&gt;

&lt;p&gt;Now you can click Container and you should see the code42 container.
If its not activated click the power on icon. This part will take a while as it will download the binary’s and setup a default environment.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/code42/code42_docker_container.png&quot; alt=&quot;Folder Stucture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the service is up and running you can see that log files in the log folder you created.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/code42/code42_logs.png&quot; alt=&quot;Folder Stucture&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;configure-crash-plan-proe-services&quot;&gt;Configure Crash Plan PROe services.&lt;/h4&gt;

&lt;p&gt;It’s time to configure the service. Head to the same IP as the synology but with https and port 4285.
In my case &lt;code class=&quot;highlighter-rouge&quot;&gt;https://10.2.0.200:4285&lt;/code&gt;. Use the MasterKey or sign up for a trial.&lt;/p&gt;

&lt;p&gt;Now go to &lt;em&gt;Settings &amp;gt; Server&lt;/em&gt; and change &lt;em&gt;Website protocol, host and port&lt;/em&gt; to your synology IP.
You also need to configure &lt;em&gt;Primary network address&lt;/em&gt; that should be the same IP but with port 4282.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/code42/code42_network.png&quot; alt=&quot;Folder Stucture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now got to &lt;em&gt;Destinations &amp;gt; Server&lt;/em&gt; and click the default server &amp;gt; cog &amp;gt; &lt;em&gt;Add Store Point&lt;/em&gt;.
Fill in a name and location /opt/backup_destination
&lt;img src=&quot;/assets/images/code42/code42_server_storepoints.png&quot; alt=&quot;Folder Stucture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next go to &lt;em&gt;Destinations &amp;gt; Server&lt;/em&gt; and click the default storage &amp;gt; cog &amp;gt; &lt;em&gt;Pause Incoming Data&lt;/em&gt; and &lt;em&gt;Reject New Archives&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/code42/code42_default_store.png&quot; alt=&quot;Folder Stucture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next go to &lt;em&gt;Destinations &amp;gt; Server&lt;/em&gt; and click the default storage &amp;gt; cog &amp;gt; &lt;em&gt;Accept Incoming Data&lt;/em&gt; and &lt;em&gt;Accept New Archives&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/code42/code42_new_store.png&quot; alt=&quot;Folder Stucture&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;thats-it&quot;&gt;That’s it!&lt;/h3&gt;

&lt;p&gt;Now the server is up and running and you can continue to configure the Code42 CrashPlanPROe server as it fits your needs.&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;</content><summary type="html">Introduction
In this tutorial I will cover how to setup a CrashPlan PROE server hosted in Docker container running on a Synology.
Repo can be found at Github and Image at Docker HUB.
***
Prerequisites

  Synology hardware.
  1gb of free RAM</summary></entry><entry><title type="html">Munki with SSL using Docker</title><link href="http://localhost:4000/2015/08/28/Munki-SSL-Docker.html" rel="alternate" type="text/html" title="Munki with SSL using Docker" /><published>2015-08-28T21:49:00+02:00</published><updated>2015-08-28T21:49:00+02:00</updated><id>http://localhost:4000/2015/08/28/Munki-SSL-Docker</id><content type="html" xml:base="http://localhost:4000/2015/08/28/Munki-SSL-Docker.html">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;In this tutorial I will cover how to setup an &lt;a href=&quot;https://www.munki.org/munki&quot;&gt;Munki&lt;/a&gt; environment with client SSL authentication. Hosting the munki data and web server in docker and using a osx machine for populating data using &lt;a href=&quot;https://github.com/lindegroup/autopkgr&quot;&gt;Autopkgr&lt;/a&gt;. Most guides out there use &lt;a href=&quot;https://www.chef.io&quot;&gt;Chef&lt;/a&gt; or &lt;a href=&quot;https://puppetlabs.com&quot;&gt;Puppet&lt;/a&gt; to push client configuration but I wanted to focus on docker and have the possibility to move between solutions depending on situation and current infrastructure.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.apple.com/mac/&quot;&gt;Mac Computer&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vmware.com/products/fusion&quot;&gt;VMWare Fusion&lt;/a&gt; or &lt;a href=&quot;https://www.virtualbox.org&quot;&gt;Virtualbox&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.docker.com/toolbox&quot;&gt;Docker Toolbox&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/machine&quot;&gt;Virtual Docker&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://kb.vmware.com/selfservice/search.do?cmd=displayKC&amp;amp;docType=kc&amp;amp;docTypeID=DT_KB_1_1&amp;amp;externalId=2082109#&quot;&gt;Virtual OSX&lt;/a&gt; Client and Server.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;create-certificates-and-docker-containers&quot;&gt;Create certificates and Docker containers.&lt;/h3&gt;

&lt;p&gt;In this lab I’m using self-signed certificates but when you plan for a production solution you should go with certificates from an &lt;a href=&quot;https://en.wikipedia.org/wiki/Certificate_authority#Providers&quot;&gt;Provider&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;During the signing proccess you need to fill in &lt;em&gt;County Code, State, City, Organization, Common Name, Department and e-mail&lt;/em&gt; just remember the &lt;strong&gt;password&lt;/strong&gt; as it will be used in the convert process.&lt;/p&gt;

&lt;h6 id=&quot;create-a-lab-catalog-and-clone-docker-munki-ssl-repo&quot;&gt;Create a lab catalog and clone docker-munki-ssl repo.&lt;/h6&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mkdir -p ~/munki-lab
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/munki-lab
git clone git@github.com:ustwo/docker-munki-ssl.git&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h6 id=&quot;create-a-certificate-authority-root&quot;&gt;Create a Certificate Authority root&lt;/h6&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;openssl genrsa -des3 -out ca.key 4096
openssl req -new -x509 -days 365 -key ca.key -out ca.crt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h6 id=&quot;create-the-client-key-and-csr&quot;&gt;Create the Client Key and CSR&lt;/h6&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;openssl genrsa -des3 -out client.key 4096
openssl req -new -key client.key -out client.csr&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h6 id=&quot;self-sign-client-crt&quot;&gt;Self-sign Client crt&lt;/h6&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;openssl x509 -req -days 365 -in client.csr -CA ca.crt -CAkey ca.key -set_serial 01 -out client.crt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h6 id=&quot;convert-client-key-and-crt-to-pem&quot;&gt;Convert Client Key and crt to PEM&lt;/h6&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;openssl x509 -in client.crt -out client-munki.crt.pem -outform PEM
openssl rsa -in client.key -out client-munki.key.pem -outform PEM&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h6 id=&quot;create-the-server-key-and-crt&quot;&gt;Create the Server Key and CRT&lt;/h6&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout server.key -out server.crt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h6 id=&quot;build-the-munki-container&quot;&gt;Build the munki container&lt;/h6&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker build -t munki-ssl .&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h6 id=&quot;create-a-data-container&quot;&gt;Create a Data Container:&lt;/h6&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run -d --name munki-data --entrypoint /bin/echo munki-ssl Data-only container &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;munki-ssl&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h6 id=&quot;start-the-munki-ssl-container&quot;&gt;Start the munki-ssl container&lt;/h6&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run -d --name munki-ssl --volumes-from munki-data -p 443:443 -h munki-ssl munki-ssl&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;what-about-data-in-your-repo&quot;&gt;What about data in your repo?&lt;/h3&gt;
&lt;p&gt;It’s high time to fill your repo with data, in my lab I used &lt;a href=&quot;https://hub.docker.com/r/nmcspadden/smb-munki/&quot;&gt;smb share&lt;/a&gt; to share the munki-data container then I used &lt;a href=&quot;http://www.lindegroup.com/autopkgr&quot;&gt;Autopkgr&lt;/a&gt; and &lt;a href=&quot;http://hjuutilainen.github.io/munkiadmin/&quot;&gt;MunkiAdmin&lt;/a&gt; to fill it.
It will not be covered in this guide but &lt;a href=&quot;google.com&quot;&gt;google&lt;/a&gt; will help your out.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;munki-client-setup&quot;&gt;Munki Client setup&lt;/h3&gt;

&lt;p&gt;Transfer &lt;em&gt;client-munki.crt.pem&lt;/em&gt; and &lt;em&gt;client-munki.key.pem&lt;/em&gt; to your client.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;scp client-munki.&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; admin@client.example.com:/tmp&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The ssh to your client machine and continue the setup.&lt;/p&gt;

&lt;h6 id=&quot;place-certs-in-managed-install-folder&quot;&gt;Place certs in Managed Install folder&lt;/h6&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo mkdir -p /Library/Managed&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;Installs/certs
sudo chmod 0700 /Library/Managed&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;Installs/certs
sudo cp /tmp/client-munki.crt.pem /Library/Managed&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;Installs/certs/client-munki.crt.pem
sudo cp /tmp/client-munki.key.pem /Library/Managed&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;Installs/certs/client-munki.key.pem
sudo chmod 0600 /Library/Managed&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;Installs/certs/client-munki&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
sudo chown root:wheel /Library/Managed&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;Installs/certs/client-munki&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h6 id=&quot;change-the-managedinstallsplist-defaults&quot;&gt;Change the ManagedInstalls.plist defaults:&lt;/h6&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo defaults write /Library/Preferences/ManagedInstalls SoftwareRepoURL &lt;span class=&quot;s2&quot;&gt;&quot;https://munki.example.com/repo&quot;&lt;/span&gt;
sudo defaults write /Library/Preferences/ManagedInstalls ClientCertificatePath &lt;span class=&quot;s2&quot;&gt;&quot;/Library/Managed Installs/certs/client-munki.crt.pem&quot;&lt;/span&gt;
sudo defaults write /Library/Preferences/ManagedInstalls ClientKeyPath &lt;span class=&quot;s2&quot;&gt;&quot;/Library/Managed Installs/certs/client-munki.key.pem&quot;&lt;/span&gt;
sudo defaults write /Library/Preferences/ManagedInstalls UseClientCertificate -bool TRUE&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h6 id=&quot;test-out-the-client&quot;&gt;Test out the client:&lt;/h6&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo /usr/local/munki/managedsoftwareupdate -vvv --checkonly&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;h6 id=&quot;sources&quot;&gt;Sources&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.afp548.com/2015/01/22/building-munki-with-docker&quot;&gt;afp548&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/mtigas/952344&quot;&gt;mtigas&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pravka.net/nginx-mutual-auth&quot;&gt;pravka&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wiki.nginx.org/FullExample&quot;&gt;nginx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><summary type="html">Introduction
In this tutorial I will cover how to setup an Munki environment with client SSL authentication. Hosting the munki data and web server in docker and using a osx machine for populating data using Autopkgr. Most guides out there use Chef or Puppet to push client configuration but I wanted to focus on docker and have the possibility to move between solutions depending on situation and current infrastructure.</summary></entry><entry><title type="html">VMware-Fusion Docker-machine</title><link href="http://localhost:4000/2015/08/23/VMware-Fusion.html" rel="alternate" type="text/html" title="VMware-Fusion Docker-machine" /><published>2015-08-23T14:20:00+02:00</published><updated>2015-08-23T14:20:00+02:00</updated><id>http://localhost:4000/2015/08/23/VMware-Fusion</id><content type="html" xml:base="http://localhost:4000/2015/08/23/VMware-Fusion.html">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;In this tutorial I will cover how I a docker-machine lab environment using VMWare Fusion.
***&lt;/p&gt;

&lt;h3 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.apple.com/mac/&quot;&gt;Mac Computer&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vmware.com/products/fusion&quot;&gt;VMWare Fusion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.docker.com/toolbox&quot;&gt;Docker Toolbox&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;create-our-lab-environment&quot;&gt;Create our lab environment&lt;/h3&gt;
&lt;p&gt;If you followed all the prerequisites you should now have a standard vmware and docker toolbox environment setup.
Lets start with creating the docker-machine in VMWare Fusion.&lt;/p&gt;

&lt;h5 id=&quot;docker-machine&quot;&gt;Docker Machine&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker-machine create -d vmwarefusion docker
&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;docker-machine env docker&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5 id=&quot;network-configuration&quot;&gt;Network configuration&lt;/h5&gt;
&lt;p&gt;In my lab environment I chose to use the NAT (vmware8) network.
Since I have several other virtual machines that I want to keep in the same environment.&lt;/p&gt;

&lt;p&gt;I want my VM’s to have static IP’s then I can create records in /etc/hosts on my machine and osx vm’s.&lt;/p&gt;

&lt;p&gt;Edit the dhcpd file with your favorit edit and add your hosts after the line &lt;em&gt;####### VMNET DHCP Configuration. End of “DO NOT MODIFY SECTION” ######.&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo vim /Library/Preferences/VMware&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;Fusion/vmnet8/dhcpd.conf&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Want to use a CLI to check hosts MAC Address but during this lab lets use VMware Fusion App and check each hosts Network &amp;gt; Settings &amp;gt; Advanced Options and write down the MAC Address.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Added three host in my case, docker(munki) vm, osx client vm and a osx server vm.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;host docker &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    hardware ethernet EE:EE:EE:EE:EE:EE;
    fixed-address 192.168.125.140;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Edit the hosts file with your favorit edit and add your hosts after the last line&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo vim /etc/hosts&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;192.168.125.140 docker.example.com&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Restart the vmnet, docker machine and your OSX VM’s.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:/Applications/VMware Fusion.app/Contents/Library/&quot;&lt;/span&gt;
sudo vmnet-cli --configure
sudo vmnet-cli --stop
sudo vmnet-cli --start
docker-machine stop munki
docker-machine start munki&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;p&gt;Thats it, you now have a docker-machine running in vmware and you are ready to start your journey into the fantastic world of docker.&lt;/p&gt;</content><summary type="html">Introduction
In this tutorial I will cover how I a docker-machine lab environment using VMWare Fusion.
***</summary></entry><entry><title type="html">AWS day to day</title><link href="http://localhost:4000/2015/08/06/AWS-tips-and-trix.html" rel="alternate" type="text/html" title="AWS day to day" /><published>2015-08-06T18:12:00+02:00</published><updated>2015-08-06T18:12:00+02:00</updated><id>http://localhost:4000/2015/08/06/AWS-tips-and-trix</id><content type="html" xml:base="http://localhost:4000/2015/08/06/AWS-tips-and-trix.html">&lt;p&gt;I love working from the console and aws-cli could be your best friend.
Guide how to install this on you system can be found on [Getting Set Up with the AWS Command Line Interface] (http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-set-up.html).&lt;/p&gt;

&lt;p&gt;Once you have finished all the step and can execute aws ec2 describe-instances from your favorit console your are ready!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;aws ec2 describe-instances
-------------------
|DescribeInstances|
+-----------------+&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;First step is to generate a SSH key, you can use multiple keys depending on needs.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ssh-keygen -t rsa -f ~/.ssh/aws-&amp;lt;NAME_OF_KEY&amp;gt;-ec2 -b 4096&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next step is to upload your SSH key to your AWS.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;aws ec2 import-key-pair --key-name aws-&amp;lt;NAME_OF_KEY&amp;gt;-ec2-key --public-key-material &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;cat ~/.ssh/aws-&amp;lt;NAME_OF_KEY&amp;gt;-ec2.pub&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;”&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now its time to crete a security group and some basic rules.
In my case I only want to allow SSH traffic from a know WAN IP.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;aws ec2 create-security-group --group-name SSHRule --description &lt;span class=&quot;s2&quot;&gt;&quot;Inbound SSH from know IP address&quot;&lt;/span&gt;

aws ec2 authorize-security-group-ingress --group-name SSHRule --cidr &amp;lt;WAN_IP&amp;gt;/32 --protocol tcp --port 22&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I use Frankfurt DataCenter and you can find images on &lt;a href=&quot;https://eu-central-1.console.aws.amazon.com/ec2/v2/home?region=eu-central-1#LaunchInstanceWizard:&quot;&gt;Amazon Machine Image (AMI)&lt;/a&gt;.
In this example I’m using Ubuntu Server 14.04 LTS (HVM), SSD Volume Type - ami-accff2b1 on a micro hardware model.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;aws ec2 run-instances --image-id ami-accff2b1 --key-name aws-&amp;lt;NAME_OF_KEY&amp;gt;-ec2-key --instance-type t2.micro --security-groups SSHRule&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Machine will now be build and external IP address associated with the host.
You can find the PublicIp address greping the describe-instances.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;aws ec2 describe-instances | grep PublicIp
&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;|  PublicIpAddress       |  52.XX.XX.83                                         &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;|
&lt;span class=&quot;o&quot;&gt;||||&lt;/span&gt;|  PublicIp      |  52.XX.XX.83                                             &lt;span class=&quot;o&quot;&gt;||||&lt;/span&gt;|
&lt;span class=&quot;o&quot;&gt;||||||&lt;/span&gt;  PublicIp      |  52.XX.XX.83&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now you are ready to SSH to your machine.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ssh -i ~/.ssh/aws-&amp;lt;NAME_OF_KEY&amp;gt;-ec2 -l ubuntu 52.XX.XX.185&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><summary type="html">I love working from the console and aws-cli could be your best friend.
Guide how to install this on you system can be found on [Getting Set Up with the AWS Command Line Interface] (http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-set-up.html).</summary></entry><entry><title type="html">Upgrade ESXi from 5.5 to 6</title><link href="http://localhost:4000/2015/08/06/ESXi-Upgrade5-5to6-0.html" rel="alternate" type="text/html" title="Upgrade ESXi from 5.5 to 6" /><published>2015-08-06T13:59:00+02:00</published><updated>2015-08-06T13:59:00+02:00</updated><id>http://localhost:4000/2015/08/06/ESXi-Upgrade5-5to6-0</id><content type="html" xml:base="http://localhost:4000/2015/08/06/ESXi-Upgrade5-5to6-0.html">&lt;p&gt;It was time to upgrade my macmini’s running vmware ESXi 5.5 to 6.
Since I didn’t want to hazzel with ISO’s and do it from the comfort of my desk I chose to do it via SSH and esxcli.&lt;/p&gt;

&lt;p&gt;Shut down all VMs on your ESXi host machine.&lt;/p&gt;

&lt;p&gt;Connect via SSH and enter maintenance mode.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;vim-cmd /hostsvc/maintenance_mode_enter&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To be able to download the updates you need a firewall rule for httpClient.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;esxcli network firewall ruleset &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; -e &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; -r httpClient&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next, you need to list the ESXi 6.x files available. It’s listed with Software, version, release number and build. In my case as of 2015-08 it’s ESXi-6.0.0-2494585-standard.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;esxcli software sources profile list -d https://hostupdate.vmware.com/software/VUM/PRODUCTION/main/vmw-depot-index.xml | grep ESXi-6&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now you are ready to upgrade your system.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;esxcli software profile update -d https://hostupdate.vmware.com/software/VUM/PRODUCTION/main/vmw-depot-index.xml -p ESXi-6.0.0-2494585-standard&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now you are ready to restart the machine and enjoy ESXi-6 and its features.
Remember if you are upgrading a macmini you might need to reselect EFI Boot after restart.&lt;/p&gt;</content><summary type="html">It was time to upgrade my macmini’s running vmware ESXi 5.5 to 6.
Since I didn’t want to hazzel with ISO’s and do it from the comfort of my desk I chose to do it via SSH and esxcli.</summary></entry></feed>
